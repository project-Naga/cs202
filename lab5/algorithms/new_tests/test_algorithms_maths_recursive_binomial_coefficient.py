# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.maths.recursive_binomial_coefficient as module_0


def test_case_0():
    bool_0 = False
    var_0 = module_0.recursive_binomial_coefficient(bool_0, bool_0)
    assert var_0 == 1
    int_0 = 466
    with pytest.raises(ValueError):
        module_0.recursive_binomial_coefficient(bool_0, int_0)


def test_case_1():
    bytes_0 = b"/\xfdv\xeb\x02\xc1"
    var_0 = module_0.recursive_binomial_coefficient(bytes_0, bytes_0)
    assert var_0 == 1
    var_1 = module_0.recursive_binomial_coefficient(var_0, var_0)
    assert var_1 == 1


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.recursive_binomial_coefficient(none_type_0, none_type_0)


def test_case_3():
    int_0 = 3625
    var_0 = module_0.recursive_binomial_coefficient(int_0, int_0)
    assert var_0 == 1
    var_1 = module_0.recursive_binomial_coefficient(int_0, int_0)
    assert var_1 == 1
    bytes_0 = b"\x17*\xeb\x85\x19e '\xb5<\x97\xa8mj\"q\xdf\x05\x90"
    var_2 = module_0.recursive_binomial_coefficient(bytes_0, bytes_0)
    assert var_2 == 1
    bool_0 = False
    var_3 = module_0.recursive_binomial_coefficient(var_1, bool_0)
    assert var_3 == 1
    bool_1 = True
    var_4 = module_0.recursive_binomial_coefficient(var_0, bool_1)
    assert var_4 == 1
    var_5 = module_0.recursive_binomial_coefficient(var_4, var_3)
    assert var_5 == 1
    var_6 = module_0.recursive_binomial_coefficient(var_3, var_4)
    assert var_6 == 1
    int_1 = 111
    var_7 = module_0.recursive_binomial_coefficient(int_1, var_5)
    assert var_7 == 111
    with pytest.raises(ValueError):
        module_0.recursive_binomial_coefficient(bool_1, int_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    float_0 = 1.3
    var_0 = module_0.recursive_binomial_coefficient(float_0, float_0)
    assert var_0 == 1
    module_0.recursive_binomial_coefficient(float_0, var_0)
