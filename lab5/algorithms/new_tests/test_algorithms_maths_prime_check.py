# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.maths.prime_check as module_0
import builtins as module_1


def test_case_0():
    bool_0 = True
    var_0 = module_0.prime_check(bool_0)
    assert var_0 is False


def test_case_1():
    float_0 = 2.2165699999995923
    float_1 = 6321.21657
    var_0 = module_0.prime_check(float_0)
    assert var_0 is True
    var_1 = module_0.prime_check(float_1)
    assert var_1 is True


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = 4355
    var_0 = module_0.prime_check(int_0)
    assert var_0 is False
    complex_0 = 2j
    module_0.prime_check(complex_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = 4353
    var_0 = module_0.prime_check(int_0)
    assert var_0 is False
    var_1 = module_0.prime_check(int_0)
    assert var_1 is False
    int_1 = -834
    var_2 = module_0.prime_check(int_1)
    bool_0 = True
    var_3 = module_0.prime_check(bool_0)
    assert var_3 is False
    var_4 = module_0.prime_check(var_0)
    list_0 = [var_0]
    module_0.prime_check(list_0)


def test_case_4():
    float_0 = 100.0
    var_0 = module_0.prime_check(float_0)
    assert var_0 is False
    float_1 = 1535.443
    var_1 = module_0.prime_check(float_1)
    assert var_1 is True
    var_2 = module_0.prime_check(var_1)
    assert var_2 is False
    bool_0 = True
    var_3 = module_0.prime_check(bool_0)
    assert var_3 is False
    var_4 = module_0.prime_check(var_1)
    assert var_4 is False


@pytest.mark.xfail(strict=True)
def test_case_5():
    float_0 = 2.0
    var_0 = module_0.prime_check(float_0)
    assert var_0 is True
    bool_0 = False
    var_1 = module_0.prime_check(bool_0)
    var_2 = module_0.prime_check(var_0)
    assert var_2 is False
    var_3 = module_0.prime_check(var_1)
    module_1.object(**var_1)


@pytest.mark.xfail(strict=True)
def test_case_6():
    float_0 = 3.0
    set_0 = {float_0}
    var_0 = module_0.prime_check(float_0)
    assert var_0 is True
    str_0 = '\nThe signup page required her to input a name and a password. However, the password\nmust be strong. The website considers a password to be strong if it satisfies the following criteria:\n\n1) Its length is at least 6.\n2) It contains at least one digit.\n3) It contains at least one lowercase English character.\n4) It contains at least one uppercase English character.\n5) It contains at least one special character. The special characters are: !@#$%^&*()-+\nShe typed a random string of length  in the password field but wasn\'t sure if it was strong.\nGiven the string she typed, can you find the minimum number of characters she must add to make her password strong?\n\nNote: Here\'s the set of types of characters in a form you can paste in your solution:\nnumbers = "0123456789"\nlower_case = "abcdefghijklmnopqrstuvwxyz"\nupper_case = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"\nspecial_characters = "!@#$%^&*()-+"\n\nInput Format\nThe first line contains an integer  denoting the length of the string.\nThe second line contains a string consisting of  characters, the password\ntyped by Louise. Each character is either a lowercase/uppercase English alphabet, a digit, or a special character.\n\nSample Input 1: strong_password(3,"Ab1")\nOutput: 3 (Because She can make the password strong by adding  characters,for example, $hk, turning the password into Ab1$hk which is strong.\n2 characters aren\'t enough since the length must be at least 6.)\n\nSample Output 2: strong_password(11,"#Algorithms")\nOutput: 1 (Because the password isn\'t strong, but she can make it strong by adding a single digit.)\n\n'
    str_1 = "2)v6qmP!u`e>0,Mu~|%"
    dict_0 = {str_0: str_0, str_1: float_0}
    module_1.object(*set_0, **dict_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    int_0 = 427
    var_0 = module_0.prime_check(int_0)
    assert var_0 is False
    var_1 = module_0.prime_check(int_0)
    assert var_1 is False
    set_0 = {int_0, int_0, int_0}
    module_0.prime_check(set_0)
