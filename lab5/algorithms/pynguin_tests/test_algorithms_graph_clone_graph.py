# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.graph.clone_graph as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    module_0.clone_graph1(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    undirected_graph_node_0 = module_0.UndirectedGraphNode(none_type_0)
    var_0 = module_0.clone_graph1(none_type_0)
    var_1 = module_0.clone_graph2(undirected_graph_node_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "algorithms.graph.clone_graph.UndirectedGraphNode"
    )
    assert var_1.label is None
    assert var_1.neighbors == []
    var_2 = module_0.clone_graph1(undirected_graph_node_0)
    var_2.index(var_0, var_1, undirected_graph_node_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    list_0 = []
    none_type_0 = None
    var_0 = module_0.clone_graph2(none_type_0)
    var_1 = module_0.clone_graph(list_0)
    undirected_graph_node_0 = module_0.UndirectedGraphNode(var_0)
    var_1.append(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "\n        Update tree height\n        "
    tuple_0 = (str_0,)
    undirected_graph_node_0 = module_0.UndirectedGraphNode(tuple_0)
    none_type_0 = None
    undirected_graph_node_1 = module_0.UndirectedGraphNode(none_type_0)
    undirected_graph_node_2 = module_0.UndirectedGraphNode(none_type_0)
    var_0 = undirected_graph_node_2.shallow_copy()
    undirected_graph_node_3 = module_0.UndirectedGraphNode(undirected_graph_node_2)
    undirected_graph_node_4 = module_0.UndirectedGraphNode(none_type_0)
    var_1 = var_0.__repr__()
    var_2 = undirected_graph_node_4.shallow_copy()
    var_3 = module_0.clone_graph(var_2)
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "algorithms.graph.clone_graph.UndirectedGraphNode"
    )
    assert var_3.label is None
    assert var_3.neighbors == []
    module_0.clone_graph2(var_1)


@pytest.mark.xfail(strict=True)
def test_case_4():
    none_type_0 = None
    module_0.dfs(none_type_0, none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b"#X\xb4\x9d\xecX\xbe4\x9390"
    undirected_graph_node_0 = module_0.UndirectedGraphNode(bytes_0)
    var_0 = undirected_graph_node_0.shallow_copy()
    var_1 = undirected_graph_node_0.add_neighbor(bytes_0)
    module_0.dfs(var_1, undirected_graph_node_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b"#X\xb4\x9d\xecX\xbe4\x9390"
    undirected_graph_node_0 = module_0.UndirectedGraphNode(bytes_0)
    var_0 = undirected_graph_node_0.shallow_copy()
    var_1 = undirected_graph_node_0.add_neighbor(bytes_0)
    module_0.clone_graph1(undirected_graph_node_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = False
    undirected_graph_node_0 = module_0.UndirectedGraphNode(bool_0)
    var_0 = undirected_graph_node_0.shallow_copy()
    var_1 = undirected_graph_node_0.shallow_copy()
    var_2 = undirected_graph_node_0.add_neighbor(var_0)
    var_3 = undirected_graph_node_0.shallow_copy()
    var_4 = undirected_graph_node_0.shallow_copy()
    var_5 = module_0.clone_graph1(undirected_graph_node_0)
    assert (
        f"{type(var_5).__module__}.{type(var_5).__qualname__}"
        == "algorithms.graph.clone_graph.UndirectedGraphNode"
    )
    assert var_5.label is False
    assert (
        f"{type(var_5.neighbors).__module__}.{type(var_5.neighbors).__qualname__}"
        == "builtins.list"
    )
    assert len(var_5.neighbors) == 1
    var_6 = module_0.clone_graph1(bool_0)
    dict_0 = {}
    undirected_graph_node_1 = module_0.UndirectedGraphNode(dict_0)
    var_3.append(undirected_graph_node_1)


@pytest.mark.xfail(strict=True)
def test_case_8():
    bool_0 = False
    undirected_graph_node_0 = module_0.UndirectedGraphNode(bool_0)
    var_0 = undirected_graph_node_0.add_neighbor(undirected_graph_node_0)
    var_1 = undirected_graph_node_0.shallow_copy()
    var_2 = undirected_graph_node_0.add_neighbor(var_0)
    var_3 = undirected_graph_node_0.shallow_copy()
    var_4 = undirected_graph_node_0.shallow_copy()
    module_0.clone_graph1(undirected_graph_node_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = False
    undirected_graph_node_0 = module_0.UndirectedGraphNode(bool_0)
    var_0 = module_0.clone_graph2(undirected_graph_node_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "algorithms.graph.clone_graph.UndirectedGraphNode"
    )
    assert var_0.label is False
    assert var_0.neighbors == []
    var_1 = undirected_graph_node_0.shallow_copy()
    none_type_0 = None
    var_2 = undirected_graph_node_0.add_neighbor(var_0)
    var_3 = module_0.clone_graph1(none_type_0)
    var_4 = undirected_graph_node_0.add_neighbor(var_0)
    var_5 = module_0.clone_graph1(var_4)
    var_6 = module_0.clone_graph1(var_3)
    var_7 = module_0.clone_graph1(var_1)
    var_8 = module_0.clone_graph(undirected_graph_node_0)
    assert (
        f"{type(var_8).__module__}.{type(var_8).__qualname__}"
        == "algorithms.graph.clone_graph.UndirectedGraphNode"
    )
    assert var_8.label is False
    assert (
        f"{type(var_8.neighbors).__module__}.{type(var_8.neighbors).__qualname__}"
        == "builtins.list"
    )
    assert len(var_8.neighbors) == 2
    var_9 = module_0.dfs(var_1, var_3)
    var_5.shallow_copy()


@pytest.mark.xfail(strict=True)
def test_case_10():
    bool_0 = False
    undirected_graph_node_0 = module_0.UndirectedGraphNode(bool_0)
    var_0 = undirected_graph_node_0.add_neighbor(undirected_graph_node_0)
    var_1 = module_0.clone_graph2(undirected_graph_node_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "algorithms.graph.clone_graph.UndirectedGraphNode"
    )
    assert var_1.label is False
    assert (
        f"{type(var_1.neighbors).__module__}.{type(var_1.neighbors).__qualname__}"
        == "builtins.list"
    )
    assert len(var_1.neighbors) == 1
    var_2 = undirected_graph_node_0.shallow_copy()
    var_3 = var_2.add_neighbor(undirected_graph_node_0)
    var_4 = var_2.shallow_copy()
    var_5 = module_0.clone_graph1(bool_0)
    var_0.shallow_copy()


@pytest.mark.xfail(strict=True)
def test_case_11():
    bool_0 = False
    undirected_graph_node_0 = module_0.UndirectedGraphNode(bool_0)
    var_0 = undirected_graph_node_0.add_neighbor(undirected_graph_node_0)
    var_1 = module_0.clone_graph2(undirected_graph_node_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "algorithms.graph.clone_graph.UndirectedGraphNode"
    )
    assert var_1.label is False
    assert (
        f"{type(var_1.neighbors).__module__}.{type(var_1.neighbors).__qualname__}"
        == "builtins.list"
    )
    assert len(var_1.neighbors) == 1
    var_2 = undirected_graph_node_0.shallow_copy()
    var_3 = var_2.add_neighbor(undirected_graph_node_0)
    var_4 = var_2.shallow_copy()
    var_5 = module_0.clone_graph2(var_2)
    assert (
        f"{type(var_5).__module__}.{type(var_5).__qualname__}"
        == "algorithms.graph.clone_graph.UndirectedGraphNode"
    )
    assert var_5.label is False
    assert (
        f"{type(var_5.neighbors).__module__}.{type(var_5.neighbors).__qualname__}"
        == "builtins.list"
    )
    assert len(var_5.neighbors) == 1
    var_6 = module_0.clone_graph1(bool_0)
    var_7 = module_0.clone_graph1(var_2)
    assert (
        f"{type(var_7).__module__}.{type(var_7).__qualname__}"
        == "algorithms.graph.clone_graph.UndirectedGraphNode"
    )
    assert var_7.label is False
    assert (
        f"{type(var_7.neighbors).__module__}.{type(var_7.neighbors).__qualname__}"
        == "builtins.list"
    )
    assert len(var_7.neighbors) == 1
    var_8 = module_0.clone_graph(var_7)
    assert (
        f"{type(var_8).__module__}.{type(var_8).__qualname__}"
        == "algorithms.graph.clone_graph.UndirectedGraphNode"
    )
    assert var_8.label is False
    assert (
        f"{type(var_8.neighbors).__module__}.{type(var_8.neighbors).__qualname__}"
        == "builtins.list"
    )
    assert len(var_8.neighbors) == 1
    var_9 = var_0.__ge__(bool_0)
    var_10 = module_0.clone_graph1(var_2)
    assert len(var_10.neighbors) == 1
    var_9.__iter__()
